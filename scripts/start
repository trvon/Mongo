#!/bin/bash`

UI=$3
API=$2
project=$1

# Until we get verfied certifications this will suffice for testing
# the https connection 
function generateKey {
    # Checking if openssl is installed
    which openssl > /dev/null
    if [ $? -ne 0 ]; then
        sudo apt-get install openssl
    fi
    
    # Generating certificate and key
    if [ ! -f $MONGO/certs/mongodb.pem ]; then
        if [ ! -d $MONGO/certs ]; then
            mkdir $MONGO/certs
        fi
        openssl req -newkey rsa:4096 -new -x509 -days 60 -nodes -out $MONGO/certs/mongodb-cert.crt -keyout $MONGO/certs/mongodb-cert.key && cd $MONGO/certs
        cat mongodb-cert.crt mongodb-cert.key > mongodb.pem
        cd ../
    fi
}

# Prepares directory for mongo
function setup {
	# Project Directory creation
    if [ ! -d $MONGO/ui ]; then
    	mkdir $MONGO/ui 
    fi
    if [ ! -d $MONGO/api ]; then 
    	mkdir $MONGO/api
    fi
    # Creates mongo database folder for initalization
    if [ ! -d $MONGO/db ]; then
    	mkdir $MONGO/db
    fi

	# Generates random's for DB
	# secret="$(tr -d -c '[:alnum:]' </dev/urandom | head -c 36 | base64)"
	# echo -e "{\n\t\"secret\": \"$secret\"," > app/$name/bin/config.json
	port=$RANDOM
	echo -e "{\n\t\"mongoConnection\": \"mongodb://localhost:$port/test?ssl=true\"\n}" > $MONGO/api/$API/bin/config.json
}

# Mongo Controls
function startMongo {
	setup
	generateKey
    mongod --sslMode requireSSL --sslPEMKeyFile $MONGO/certs/mongodb.pem --dbpath db --port $port --quiet & # --fork --syslog
}

# Starts everything
function startAll {
	# Starts mongodb and forks it to the background
	startMongo
	# Will need to create own start script
	echo -e "\n\nMongo is hosted at\nlocalhost:$port\n\n"
	cd $MONGO/api/$API && npm install && clear && npm start &
	exit
}

# Start the UI
function startUI {
	status=$(ps aux | grep -E "[m]ongod" | awk {'print $2'})
	if [ -z $status ]; then
		echo "Make sure that mongoDB is running first"
	else
		echo "hey this needs to be implemented"
	fi
}

# Use Api start script in future
function startApi {
	status=$(ps aux | grep -E "[m]ongod" | awk {'print $2'})
	if [ -z $status ]; then
		echo "Make sure that mongoDB is running first"
	else
		cd $MONGO/$project/$name && npm install && npm start
	fi
}

case $project in 
	"all") startAll ;;
	"api") startApi ;;
	"ui" ) startUI ;;
	"db" ) startMongo ;;
	*) echo -e "\n Sorry, I do not know what you needs to be done.\n Correct options are as follows:"\
				"\n\t- deploy start [all]\n\t- deploy start [api]\n\t- deploy start [ui]\n\t- deploy start [db]\n"
esac