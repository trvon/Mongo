#!/bin/bash
# Author: Trevon Williams

url=$2
name="${3##*/}"
project="${2^^}"
option="${1,,}"

# For Storing previous cases
# making sure file is created
if [ ! -f history ]; then 
	touch history
fi

UI=$(cat history | grep UI | sed 's/UI: //')
API=$(cat history | grep API | sed 's/API: //')

currentUI=$(cat history | grep UI)
currentAPI=$(cat history | grep API)



# Until we get verfied certifications this will suffice for testing
# the https connection 

#//////////////#
# SSL 
#//////////////#
function genKey {
    # Checking if openssl is installed
    which openssl > /dev/null
    if [ $? -ne 0  ]; then
        sudo apt-get install openssl
    fi
    
    # Generating certificate and key
    if [ ! -f certs/mongodb.pem ]; then
        if [ ! -d certs ]; then
            mkdir certs
        fi
        openssl req -newkey rsa:4G096 -new -x509 -days 60 -nodes -out certs/mongodb-cert.crt -keyout certs/mongodb-cert.key && cd certs
        cat mongodb-cert.crt mongodb-cert.key > mongodb.pem
        cd ..
    fi
}

#//////////////#z
# MOAB Controls
#//////////////#
function stopALL {
	ps aux | grep -E "[m]ongod|[d]eploy|[n]pm|[n]ode" | awk {'print $2'} | xargs kill
}

function startALL {
	# Starts mongodb and forks it to the background
	# Starting DB
	# rm data/db/*.lock
	startMongo
	echo -e "\n\nYou can find the project at\n localhost:$port\n\n"
	# So you know what port webhost is located on
	cd app/API/$API && npm install && npm start
}

#//////////////#
# Mongo Controls
#//////////////#
function startMongo {
	setup
	genKey
    mongod --sslMode requireSSL --sslPEMKeyFile certs/mongodb.pem --dbpath data/db --port $port --quiet &
    clear
}

function stopMongo {
	ps aux | grep -E "[m]ongod" | awk {'print $2'} | xargs kill
}

# Prepares directory for mongo
function setup {
	# Project Directory creation
    if [ ! -d app ]; then
    	mkdir -p app/UI app/API
    fi
    # Creates mongo database folder for initalization
    if [ ! -d data/db ]; then
    	mkdir -p data/db
    fi
	# Generates random's for DB
	# secret="$(tr -d -c '[:alnum:]' </dev/urandom | head -c 36 | base64)"
	# echo -e "{\n\t\"secret\": \"$secret\"," > app/$name/bin/config.json
	port=$RANDOM
	# If secret is generated before, we need to store for creation of 
	# new file
	echo -e "{\n\t\"mongoConnection\": \"mongodb://localhost:$port/test?ssl=true\"\n}" > app/API/$API/bin/config.json
}

#//////////////#
# API Control
#//////////////#
function startApi {
	status=$(ps aux | grep -E "[m]ongod" | awk {'print $2'})
	if [ -z $status ]; then
		echo "Make sure that mongoDB is running first"
	else
		cd app/$API/$name && npm install && npm start
	fi
}
function stopApi {
	ps aux | grep -E "[n]pm|[n]ode" | awk {'print $2'} | xargs kill
}

#//////////////#
# Version Control
#//////////////#

# Cloning
function getApi {
	clear
 	if [ -d app/$project/$name ]; then
 		echo "Are you sure you want to overrite this API? ( y | n)"
 		read y
 		if [ "${y,,}" == 'y' ]; then
 			rm -fr app/$project/$name && git clone $url app/$project/$name --quiet
 		fi
 	else
 		git clone $url app/$project/$name --quiet
 	fi
	exit
}

# Setting API for use
function setApi {
	if [ ! -d app/$project/$name ]; then
		echo "No API has been installed with that name"
	fi

	if [ $project == "API" ]; then
		echo "API: $name" > history
		if [ -z $currentUI ]; then
			echo "Make sure you set the current UI"
		else 
			echo $currentUI >> history
		fi
	else
		echo "UI: $name" > history
		if [ -z $currentAPI ]; then
			echo "Make sure you set the current API"
		else/
		echo $currentAPI >> history
		fi
	fi
	exit
}

# Updating one or all repositories
function update {
	
	if [ !-z $name ]; then
		echo -e "Updating $name"
    	cd app/$project/$name
    	git pull --quiet			

    else
    	echo -e "You are updating all $project repo's :)\n"
		for i in app/$project/* ; do
			git pull app/$project/$i --quiet
			cd ..
    	done
    fi
    echo "finished"
    exit
}

case $option in
	"start-all") startALL ;;
	"set") setApi ;;
	"get") getApi ;; 
	"stop-all") stopALL ;;
    "update") update ;;
	"start-db") startMongo ;;
	"start-api" ) startApi ;;
	"stop-api" ) stopApi ;;
	# Needs to be completed
	# "start-ui"
	# "stop-db"
	# "stop-ui"
    *) echo -e "Sorry that is not an option, please refer to the man page\n'man deploy'"
esac

